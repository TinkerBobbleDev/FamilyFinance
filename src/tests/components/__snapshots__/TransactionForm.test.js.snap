// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TransactionForm /> should work 1`] = `
<div>
  <form
    onSubmit={[Function]}
  >
    <WithStyles(FormControl)>
      <withStyles(SingleDatePicker)
        anchorDirection="left"
        block={true}
        calendarInfoPosition="bottom"
        customCloseIcon={null}
        customInputIcon={null}
        date={"2018-11-14T11:00:00.000Z"}
        daySize={39}
        disabled={false}
        displayFormat="DD MMM YYYY"
        enableOutsideDays={false}
        firstDayOfWeek={null}
        focused={false}
        hideKeyboardShortcutsPanel={false}
        horizontalMargin={0}
        id="age-native-date"
        initialVisibleMonth={null}
        inputIconPosition="before"
        isDayBlocked={[Function]}
        isDayHighlighted={[Function]}
        isOutsideRange={[Function]}
        isRTL={false}
        keepFocusOnInput={false}
        keepOpenOnDateSelect={false}
        monthFormat="MMMM YYYY"
        navNext={null}
        navPrev={null}
        noBorder={false}
        numberOfMonths={1}
        onClose={[Function]}
        onDateChange={[Function]}
        onFocusChange={[Function]}
        onNextMonthClick={[Function]}
        onPrevMonthClick={[Function]}
        openDirection="down"
        orientation="horizontal"
        phrases={
          Object {
            "calendarLabel": "Calendar",
            "chooseAvailableDate": [Function],
            "clearDate": "Clear Date",
            "closeDatePicker": "Close",
            "dateIsSelected": [Function],
            "dateIsUnavailable": [Function],
            "enterKey": "Enter key",
            "escape": "Escape key",
            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
            "homeEnd": "Home and end keys",
            "jumpToNextMonth": "Move forward to switch to the next month.",
            "jumpToPrevMonth": "Move backward to switch to the previous month.",
            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
            select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
            "keyboardShortcuts": "Keyboard Shortcuts",
            "leftArrowRightArrow": "Right and left arrow keys",
            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
            "moveFocusByOneMonth": "Switch months.",
            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
            "openThisPanel": "Open this panel.",
            "pageUpPageDown": "page up and page down keys",
            "questionMark": "Question mark",
            "returnFocusToInput": "Return to the date input field.",
            "selectFocusedDate": "Select the date in focus.",
            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
            "upArrowDownArrow": "up and down arrow keys",
          }
        }
        placeholder="Date"
        readOnly={false}
        regular={false}
        renderCalendarInfo={null}
        renderDayContents={null}
        renderMonth={null}
        reopenPickerOnClearDate={false}
        required={false}
        screenReaderInputMessage=""
        showClearDate={false}
        showDefaultInputIcon={true}
        small={false}
        verticalHeight={null}
        verticalSpacing={22}
        weekDayFormat="dd"
        withFullScreenPortal={false}
        withPortal={false}
      />
    </WithStyles(FormControl)>
    <WithStyles(FormControl)>
      <WithStyles(InputLabel)
        htmlFor="age-native-type"
      >
        Type
      </WithStyles(InputLabel)>
      <WithStyles(Select)
        disabled={false}
        input={
          <WithStyles(Input)
            id="age-native-type"
          />
        }
        native={true}
        onChange={[Function]}
        value=""
      >
        <option />
        <option
          key="expense"
          value="Expense"
        >
          Expense
        </option>
        <option
          key="income"
          value="Income"
        >
          Income
        </option>
        <option
          key="Transfer"
          value="Transfer"
        >
          Transfer
        </option>
      </WithStyles(Select)>
    </WithStyles(FormControl)>
    <div>
      <TextField
        label="Amount"
        onChange={[Function]}
        placeholder="Amount"
        required={false}
        select={false}
        type="text"
        value=""
      />
      <TextField
        label="Description"
        onChange={[Function]}
        placeholder="description"
        required={false}
        select={false}
        type="text"
        value=""
      />
      <WithStyles(FormControl)>
        <WithStyles(InputLabel)
          htmlFor="age-native-account"
        >
          Account
        </WithStyles(InputLabel)>
        <WithStyles(Select)
          input={
            <WithStyles(Input)
              id="age-native-account"
            />
          }
          native={true}
          onChange={[Function]}
          value=""
        >
          <option
            value=""
          />
           
          <option
            key="bank"
            value="bank"
          >
            bank
          </option>
        </WithStyles(Select)>
      </WithStyles(FormControl)>
      <WithStyles(FormControl)>
        <WithStyles(InputLabel)
          htmlFor="age-native-category"
        >
          Category
        </WithStyles(InputLabel)>
        <WithStyles(Select)
          input={
            <WithStyles(Input)
              id="age-native-category"
            />
          }
          native={true}
          onChange={[Function]}
          value=""
        >
          <option
            value=""
          />
        </WithStyles(Select)>
      </WithStyles(FormControl)>
      <WithStyles(Button)
        onClick={[Function]}
        variant="raised"
      >
        Add
      </WithStyles(Button)>
      <WithStyles(Button)
        variant="raised"
      >
        Cancel
      </WithStyles(Button)>
    </div>
  </form>
</div>
`;
